import telebot
import psycopg2
import os
import dotenv
import vercel_blob
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from Core.Database import Database
from Core.HouseManager import HouseManager
from Core.UserState import UserState

class HouseBot:
    def __init__(self):
        dotenv.load_dotenv('/Users/xasanboy/MY/Bots/housebot/_env')
        self.bot = telebot.TeleBot(os.getenv("TELEGRAM_BOT_TOKEN"))
        self.db = Database(os.getenv("DATABASE_URL"))
        self.house_manager = HouseManager(self.db)
        self.user_states = UserState()
        self.admin_password = os.getenv("ADMIN_PASSWORD")
        self._register_handlers()

    def _register_handlers(self):
        bot = self.bot
        bot.message_handler(commands=['start', 'help'])(self.send_welcome)
        bot.message_handler(func=lambda m: m.text == '–ü–æ–∏—Å–∫ –¥–æ–º–∞' or m.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ–º–∞')(self.search_home)
        bot.message_handler(func=lambda m: m.text == '–ù–∞–∑–∞–¥')(self.go_back_to_main_menu)
        bot.message_handler(func=lambda m: m.text == '–ü–æ–∏—Å–∫ –ø–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é')(self.search_by_location_prompt)
        bot.message_handler(func=lambda m: m.chat.id in self.user_states.states and self.user_states.get(m.chat.id)['action'] == 'search_home')(self.search_houses_start)
        bot.message_handler(func=lambda m: m.chat.id in self.user_states.states and self.user_states.get(m.chat.id)['action'] == 'search_by_location')(self.search_houses_by_location)
        bot.callback_query_handler(func=lambda call: call.data.startswith("prev_") or call.data.startswith("next_"))(self.handle_navigation)
        bot.message_handler(commands=['admin'])(self.ask_password)
        bot.message_handler(func=lambda m: m.chat.id in self.user_states.states and self.user_states.get(m.chat.id)['action'] == 'auth_admin')(self.handle_password_entry)
        bot.message_handler(func=lambda m: m.chat.id in self.user_states.states and self.user_states.get(m.chat.id)['auth'] and m.text == '–î–æ–±–∞–≤–∏—Ç—å –¥–æ–º')(self.add_house)
        bot.message_handler(func=lambda m: m.chat.id in self.user_states.states and self.user_states.get(m.chat.id)['auth'] and m.text == '–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å')(self.change_password)
        bot.message_handler(func=lambda m: m.chat.id in self.user_states.states and self.user_states.get(m.chat.id)['auth'] and self.user_states.get(m.chat.id)['action'] == 'change_password')(self.handle_password)
        bot.message_handler(func=lambda m: m.chat.id in self.user_states.states and self.user_states.get(m.chat.id)['auth'] and m.text == '–í—ã–π—Ç–∏')(self.admin_logout)
        bot.message_handler(func=lambda m: m.chat.id in self.user_states.states and self.user_states.get(m.chat.id)['action'] == 'add_house' and m.text in ['–®–æ—Ö–º–∞–Ω—Å—É—Ä', '–§–∏—Ä–¥–∞—É—Å–∏', '–°–æ–º–æ–Ω–∏', '–°–∏–Ω–æ'])(self.add_house_description)
        bot.message_handler(func=lambda m: m.text == '–ì–æ—Ç–æ–≤–æ')(self.finish_image_upload)
        bot.message_handler(content_types=['photo'])(self.process_image_upload)

    def send_welcome(self, message):
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add(types.KeyboardButton('–ü–æ–∏—Å–∫ –¥–æ–º–∞'))
        self.bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=markup)
        self.user_states.reset(message.chat.id)

    def search_home(self, message):
        self.user_states.set(message.chat.id, 'action', 'search_home')
        self.show_district_menu(message)

    def show_district_menu(self, message):
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add(
            types.KeyboardButton('–®–æ—Ö–º–∞–Ω—Å—É—Ä'),
            types.KeyboardButton('–§–∏—Ä–¥–∞—É—Å–∏'),
            types.KeyboardButton('–°–æ–º–æ–Ω–∏'),
            types.KeyboardButton('–°–∏–Ω–æ'),
            types.KeyboardButton('–ü–æ–∏—Å–∫ –ø–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é'),
            types.KeyboardButton('–ù–∞–∑–∞–¥')
        )
        self.bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:", reply_markup=markup)

    def go_back_to_main_menu(self, message):
        if self.user_states.get(message.chat.id)['auth']:
            self.admin_menu(message)
        else:
            self.send_welcome(message)

    def search_by_location_prompt(self, message):
        self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        self.user_states.set(message.chat.id, 'action', 'search_by_location')

    def search_houses_start(self, message):
        district = message.text
        if district == '–ù–∞–∑–∞–¥':
            self.go_back_to_main_menu(message)
            return
        houses = self.house_manager.get_houses_by_district(district)
        self.user_states.set(message.chat.id, 'district', district)
        self.user_states.set(message.chat.id, 'house_index', 0)
        self.user_states.set(message.chat.id, 'houses', houses)
        if houses:
            self.display_house(message.chat.id, 0)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
            self.bot.send_message(message.chat.id, "–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞–π–æ–Ω–∞–º, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É ¬´–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞–π–æ–Ω–∞–º¬ª.", reply_markup=markup)
            self.user_states.set(message.chat.id, 'action', 'houses_shown')
        else:
            self.bot.send_message(message.chat.id, "–î–æ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —ç—Ç–æ–º —Ä–∞–π–æ–Ω–µ.", reply_markup=types.ReplyKeyboardRemove())
            self.show_district_menu(message)

    def search_houses_by_location(self, message):
        location_keyword = message.text
        houses = self.house_manager.get_houses_by_location(location_keyword)
        self.user_states.set(message.chat.id, 'houses', houses)
        self.user_states.set(message.chat.id, 'house_index', 0)
        if houses:
            self.display_house(message.chat.id, 0)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
            self.bot.send_message(message.chat.id, "–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞–π–æ–Ω–∞–º, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É ¬´–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞–π–æ–Ω–∞–º¬ª.", reply_markup=markup)
            self.user_states.set(message.chat.id, 'action', 'houses_shown')
        else:
            self.bot.send_message(message.chat.id, "–î–æ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ —ç—Ç–æ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é.", reply_markup=types.ReplyKeyboardRemove())
            self.show_district_menu(message)

    def display_house(self, chat_id, house_index):
        houses = self.user_states.get(chat_id)['houses']
        if not houses:
            return
        house = houses[house_index]
        media_group = [InputMediaPhoto(url) for url in house["images"]]
        if media_group:
            self.bot.send_media_group(chat_id, media_group)
        caption = f"–û–ø–∏—Å–∞–Ω–∏–µ: {house['description']}\n–¶–µ–Ω–∞: {house['price']}\n–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {house['location']}\n"
        self.bot.send_message(
            chat_id,
            caption,
            reply_markup=self.create_navigation_buttons(house_index, len(houses))
        )

    def create_navigation_buttons(self, house_index, total_houses):
        markup = InlineKeyboardMarkup()
        if house_index > 0:
            markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data=f"prev_{house_index-1}"))
        if house_index < total_houses - 1:
            markup.add(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è", callback_data=f"next_{house_index+1}"))
        markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ä–∞–π–æ–Ω–∞–º", callback_data="back_to_districts"))
        return markup

    def handle_navigation(self, call):
        action, index = call.data.split('_')
        index = int(index)
        self.user_states.set(call.message.chat.id, 'house_index', index)
        self.display_house(call.message.chat.id, index)

    def ask_password(self, message):
        self.user_states.set(message.chat.id, 'auth', False)
        self.user_states.set(message.chat.id, 'action', 'auth_admin')
        self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:", reply_markup=types.ReplyKeyboardRemove())

    def handle_password_entry(self, message):
        if message.text == self.admin_password:
            self.user_states.set(message.chat.id, 'auth', True)
            self.admin_menu(message)
        else:
            self.bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    def admin_menu(self, message):
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add(
            types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –¥–æ–º'),
            types.KeyboardButton('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ–º–∞'),
            types.KeyboardButton('–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å'),
            types.KeyboardButton('–í—ã–π—Ç–∏')
        )
        self.bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
        self.user_states.set(message.chat.id, 'action', 'admin_menu')

    def add_house(self, message):
        self.user_states.set(message.chat.id, 'action', 'add_house')
        self.select_district(message)

    def select_district(self, message):
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add(
            types.KeyboardButton('–®–æ—Ö–º–∞–Ω—Å—É—Ä'),
            types.KeyboardButton('–§–∏—Ä–¥–∞—É—Å–∏'),
            types.KeyboardButton('–°–æ–º–æ–Ω–∏'),
            types.KeyboardButton('–°–∏–Ω–æ'),
            types.KeyboardButton('–ù–∞–∑–∞–¥')
        )
        self.bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–æ–º–∞:", reply_markup=markup)

    def add_house_description(self, message):
        self.user_states.set(message.chat.id, 'district', message.text)
        msg = self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–º–∞:", reply_markup=types.ReplyKeyboardRemove())
        self.bot.register_next_step_handler(msg, self.process_description)

    def process_description(self, message):
        self.user_states.set(message.chat.id, 'description', message.text)
        msg = self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É:")
        self.bot.register_next_step_handler(msg, self.process_price)

    def process_price(self, message):
        self.user_states.set(message.chat.id, 'price', message.text)
        msg = self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:")
        self.bot.register_next_step_handler(msg, self.process_location)

    def process_location(self, message):
        state = self.user_states.get(message.chat.id)
        house_id = self.house_manager.add_house(
            state['district'], state['description'], state['price'], message.text
        )
        self.user_states.set(message.chat.id, 'house_id', house_id)
        self.bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–º–∞ –ø–æ –æ–¥–Ω–æ–º—É. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ì–æ—Ç–æ–≤–æ'")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('–ì–æ—Ç–æ–≤–æ'))
        self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–º–∞.", reply_markup=markup)

    def process_image_upload(self, message):
        if 'house_id' not in self.user_states.get(message.chat.id):
            return
        photo = message.photo[-1]
        file_id = photo.file_id
        file_info = self.bot.get_file(file_id)
        downloaded_file = self.bot.download_file(file_info.file_path)
        file_name = f"{self.user_states.get(message.chat.id)['house_id']}_{file_id}.jpg"
        blob_url = vercel_blob.put(file_name, downloaded_file, {"Content-Type": "image/jpeg"})
        self.house_manager.add_image(self.user_states.get(message.chat.id)['house_id'], blob_url['url'])
        self.bot.send_message(message.chat.id, "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.")

    def finish_image_upload(self, message):
        self.bot.send_message(message.chat.id, "–î–æ–º —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=types.ReplyKeyboardRemove())
        self.user_states.set(message.chat.id, 'auth', True)
        self.admin_menu(message)

    def change_password(self, message):
        self.user_states.set(message.chat.id, 'action', 'change_password')
        self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:", reply_markup=types.ReplyKeyboardRemove())

    def handle_password(self, message):
        dotenv.set_key('_env', "ADMIN_PASSWORD", message.text)
        os.environ["ADMIN_PASSWORD"] = message.text
        self.admin_password = message.text
        self.bot.send_message(message.chat.id, "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
        self.user_states.set(message.chat.id, 'action', 'admin_menu')
        self.admin_menu(message)

    def admin_logout(self, message):
        self.bot.send_message(message.chat.id, "–í—ã –≤—ã—à–ª–∏ –∏–∑ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=types.ReplyKeyboardRemove())
        self.send_welcome(message)

    def run(self):
        self.bot.polling()

if __name__ == "__main__":
    HouseBot().run() 